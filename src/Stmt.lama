-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of
    Assn (lable, expr) -> [state <- [lable, evalExpr (state, expr)], world]
  | Seq (fst_stmt, snd_stmt) -> eval(eval(c, fst_stmt), snd_stmt)
  | Skip -> c
  | Read (lable) -> 
      case readWorld (world) of [data, newWorld] ->
        [state <- [lable, data], newWorld]
      esac
  | Write (expr) -> [state, writeWorld (evalExpr (state, expr) , world)]
  | If (expr, is_stmt, else_stmt) ->
      if evalExpr (state, expr) then eval (c, is_stmt) else eval (c, else_stmt) fi
  | While (expr, stmt) ->
      if evalExpr (state, expr) then eval (eval (c, stmt), While (expr, stmt)) else c fi
  | DoWhile (stmt, expr) ->
      eval (eval (c, stmt), While (expr, stmt))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
