-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cst, state, world], insns) { 
    case insns of 
      {} -> c
    | head:rest -> 
      case head of 
        BINOP (op) -> 
          case stack of r:l:stack ->
            eval([evalOp (op, l, r):stack, cst, state, world], rest)
          esac
      | LD (lable) -> 
          eval ([lookup (state, lable):stack, cst, state, world], rest)
      | ST (lable) -> assign (state, lable, hd (stack)); eval(c, rest)
      | CONST (n) -> 
          eval ([n:stack, cst, state, world], rest)
      | LABEL (l) -> 
          eval (c, rest)
      | JMP (lable) -> 
          eval (c, fromLabel (env, lable))
      | CJMP("z", lable) -> 
          case stack of data:stack -> 
            eval ([stack, cst, state, world], 
                  if data == 0 
                  then fromLabel (env, lable)
                  else rest 
                  fi)
          esac
      | CJMP("nz", lable) -> 
          case stack of data:stack ->
            eval ([stack, cst, state, world],
                  if data != 0 
                  then env.fromLabel (lable) 
                  else rest 
                  fi) 
          esac
      | LDA (lable) -> 
          eval ([lable:stack, cst, state, world], rest)
      | STI -> 
          case stack of r:l:stack -> 
            assign (state, l, r); eval ([r:stack, cst, state, world], rest)
          esac
      | DROP -> 
          eval ([tl (stack), cst, state, world], rest)
      | CALL (lable, _) -> 
          eval ([stack, [state, rest]:cst, state, world], fromLabel (env, lable))
      | BEGIN (_, numf, nums) -> 
          case take (stack, numf) of
            [stack, args] -> 
              case foldl (fun ([state, numf], arg) {assign (state, Arg (numf), arg); [state, numf + 1]}, [makeState (numf, nums), 0], args) of 
                [state, _] -> eval ([stack, cst, state, world], rest)
              esac
          esac
      | GLOBAL (lable) -> 
          assign (state, Glb (lable), 0); eval (c, rest)
      | END -> 
          case cst of 
            {} -> c
          | [state, rest]:cst -> eval ([stack, cst, state, world], rest)
          esac
      | BUILTIN (lable, n) -> 
          case take (stack, n) of 
            [stack, args] -> 
              case evalBuiltin (lable, args, world) of 
                [res, world] -> eval ([res:stack, cst, state, world], rest)
              esac
          esac
      | STRING (s) -> 
          eval ([s:stack, cst, state, world], rest)
      | ELEM -> 
          case stack of 
            i:arr:stack -> 
              eval (
                [
                  (case arr of 
                    Sexp(_, arr) -> arr[i]
                  | _ -> arr[i]
                  esac):stack, 
                  cst, 
                  state, 
                  world
                ],
                rest
              )
          esac
      | ARRAY (n) -> 
          case take (stack, n) of
            [_:stack, vals] -> eval ([listArray (vals):stack, cst, state, world], rest)
          esac
      | STA ->
          case stack of 
            data:i:arr:stack -> 
              case arr of 
                Sexp(_, arr) -> arr[i] := data
              | _ -> arr[i] := data
              esac; eval ([data:stack, cst, state, world], rest)
          esac
      | SEXP (lable, n) -> 
          case take(stack, n) of 
            [_:stack, args] -> eval ([Sexp (lable, listArray (args)):stack, cst, state, world], rest)
          esac
      esac
    esac
  }
  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | Arg (x) -> Arg (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

fun addDefs (env, defs) {
  fun generateCodeForGlobals (names) {
    foldl (fun (code, name) {
      code <+ GLOBAL (name)
    }, emptyBuffer (), names)
  }

  foldl (fun ([ env, code ], def) {
    case def of
      Fun (name, args, body) ->
        case genFunLabel (env, name) of
          [fLab, env] -> [addFun (env, name, fLab, size (args)), code]
        esac
    | Var (vars) ->
      [
        addVars (env, vars),
        if isGlobal (env) then code <+> generateCodeForGlobals (vars) else code fi 
      ] 
    esac
  }, [ env, emptyBuffer () ], defs)
}

fun rememberFuns (env, defs) {
  foldl (fun (env, def) {
    case def of
      Fun (name, args, body) ->
        case lookupFun (env, name) of
          Fun (fLab, _) -> rememberFun (env, fLab, args, body)
        esac
    | _ -> env
    esac
  }, env, defs)
}
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
--    | Read  (x)         -> [false, env, singletonBuffer (READ) <+ ST (lookupVar (env, x)) <+ DROP]
--    | Write (x) ->
--      case env.genLabel of 
--        [eLab, env] -> 
--          case compile (eLab, env, x) of
--            [labCmpl, env, code] -> 
--              [false, env, code <+> label (eLab, labCmpl) <+ WRITE]
--          esac
--      esac
    | Assn  (x, e) ->
        var storeV = case x of 
          ElemRef (_, _) -> STA 
          | _ -> STI 
        esac;
        case genLabels (env, 2) of
          [labFst, labSnd, env] ->
            case compile (labFst, env, x) of
              [labFstCmpl, env, codeFst] ->
                case compile (labSnd, env, e) of
                  [labSndCmpl, env, codeSnd] ->
                    [false, env, codeFst <+> label (labFst, labFstCmpl) <+> codeSnd <+> label (labSnd, labSndCmpl) <+ storeV]
                esac
            esac
        esac
    | Seq (s1, s2) ->
        case env.genLabel of
          [sFstLab, env] ->
            case compile (sFstLab, env, s1) of
              [sFstLabCmpl, env, sFstCode] ->
                case compile (lab, env, s2) of
                  [labUsed, env, sSndCode] -> 
                    [labUsed, env, sFstCode <+> label (sFstLab, sFstLabCmpl) <+> sSndCode]
                esac
            esac
        esac
    | If (e, s, o) ->
      case env.genLabels (2) of
        [eLab, oLab, env] ->
          case compile (eLab, env, e) of
            [eLabCmpl, env, eCode] ->
              case compile (lab, env, s) of
                [_, env, sCode] ->
                  case compile (lab, env, o) of
                    [_, env, oCode] ->
                      [true, env, eCode <+> label (eLab, eLabCmpl) <+ CJMP ("z", oLab) <+> sCode <+ JMP (lab) <+> label (oLab, true) <+> oCode]
                  esac
              esac
          esac
      esac
    | While (e, s) ->
      case env.genLabels (2) of
        [eLab, sLab , env] ->
          case compile (sLab, env, e) of
            [sLabCmpl, env, eCode] ->
              case compile (eLab, env, s) of
                [_, env, sCode] ->
                  [true, env, label (eLab, true) <+> eCode <+ CJMP ("z", lab) <+> label (sLab, sLabCmpl) <+> sCode <+ JMP (eLab)]
              esac
          esac
      esac
    | DoWhile (e, s) ->
      case genLabels (env, 2) of
        [eLab, sLab, env] ->
          case compile(eLab, env, s) of
            [sLabCmpl, env, sCode] ->
              case compile(sLab, env, e) of
                [_, env, eCode] ->
                  [false, env, label (eLab, true) <+> eCode <+> label (sLab, sLabCmpl) <+> sCode <+ CJMP ("nz", eLab)]
              esac
          esac
      esac
    | Binop (op, l, r) -> 
      case env.genLabels (2) of
        [lLab, rLab, env] ->
          case compile (lLab, env, l) of
            [lLabCmpl, env, lCode] ->
              case compile (rLab, env, r) of
                [rLabCmpl, env, rCode] ->
                  [false, env, lCode <+> label (lLab, lLabCmpl) <+> rCode <+> label (rLab, rLabCmpl) <+ BINOP (op)]
              esac          
          esac
      esac
    | Ignore (e) -> 
      case genLabel (env) of [eLab, env] ->
        case compile (eLab, env, e) of [eLabCmpl, env, eCode] -> 
          [false, env, eCode <+> label (eLab, eLabCmpl) <+ DROP]
        esac
      esac
    | Scope (defs, expr) -> 
        case foldl (fun ([code, env], def) {
          case def of
            Var (lables) -> 
              [if env.isGlobal 
               then foldl (fun (code, lable) { code <+ GLOBAL (lable) }, code, lables) 
               else code 
               fi,
               addVars (env, lables)]
          | _ -> 
              [code, env]
          esac
        }, [emptyBuffer (), env.beginScope], defs) of [sCode, env] ->
          case foldl (fun ([env, funs], def) {
            case def of
              Fun (lable, args, body) -> 
                case genFunLabel (env, lable) of [lab, env] -> 
                  [addFun (env, lable, lab, args.size), [lab, args, body]:funs]
                esac
            | _ -> 
                [env, funs]
            esac
          }, [env, {}], defs) of [env, funs] -> 
            case foldl (fun (env, [lab, args, body]) {
              rememberFun (env, lab, args, body)
            }, env, funs) of env ->
              case compile (lab, env, expr) of 
                [used, env, eCode] -> 
                  [used, env.endScope, sCode <+> eCode]
              esac
            esac
          esac
        esac
    | Call (lable, exprs) -> 
        case foldl(fun ([env, code], a) {
          case env.genLabel of 
            [eLab, env] ->
              case compile (eLab, env, a) of 
                [eLabCmpl, env, eCode] -> 
                  [env, code <+> eCode <+> label (eLab, eLabCmpl)]
              esac
          esac
        }, [env, emptyBuffer ()], exprs) of [env, code] ->
          case lookupFun (env, lable) of 
            Fun (lable, a) -> 
              case lable of
                  Builtin (lable) -> [false, env, code <+ BUILTIN (lable, a)]
                | _ -> [false, env, code <+ CALL (lable, a)]
              esac
          esac 
        esac
    | Set (x, e) -> compile (lab, env, Assn (Ref (x), e))
    | String (s) -> [false, env, singletonBuffer (STRING (s))]
    | Array (elems) -> 
        case genLabel (env) of 
          [lab, env] -> 
            case compileList (lab, env, elems) of 
              [a, env, code] ->
                [false, env, singletonBuffer (CONST (size (elems))) <+> code <+> label (lab, a) <+ ARRAY (size (elems))]
            esac
        esac      
    | Sexp (lable, elems) -> 
        case genLabel (env) of 
          [lab, env] -> 
            case compileList(lab, env, elems) of 
              [used, env, code] ->
                [false, env, singletonBuffer (CONST (size (elems) + 1)) <+> code <+>label (lab, used) <+ SEXP (lable, size (elems))]
            esac
        esac    
    | Elem (arr, n) -> 
        case genLabel (env) of
          [lab, env] -> 
            case compileList (lab, env, {arr, n}) of
              [used, env, code] -> [false, env, code <+> label (lab, used) <+ ELEM]
            esac
        esac
    | ElemRef (arr, n) -> 
        case genLabel (env) of
          [lab, env] -> 
            case compileList(lab, env, {arr, n}) of
              [used, env, code] -> [false, env, code <+> label (lab, used)]
            esac
        esac
    esac
  }

  fun compileFuns (env) {
    case getFuns (env) of 
      [funs, env] -> 
        foldl (fun ([env, code], func@(Fun (fLabel, args, body, state))) {
          case genLabel (env) of
            [lab, env] ->
              case compile (lab, addArgs (beginFun (env, state), args), body) of
                [used, fEnv, fBodyCode] -> [
                  env,
                  code <+ LABEL (fLabel) <+ BEGIN (fLabel, size (args), getLocals (fEnv)) <+> fBodyCode <+> label (lab, used) <+ END
                ]
              esac
          esac
        }, [env, emptyBuffer ()], funs).snd -- take second value from pair [env, code]
    esac
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] -> getBuffer $ singletonBuffer(LABEL ("main")) <+ BEGIN ("main", 0, getLocals (env)) <+> code <+> label (endLab, endLabUsed) <+ END <+> compileFuns (env)
       esac
  esac
}
