-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}


fun addElems (state, names, elems) {
  foldl (
    fun (st, [x, v]) {
      addName (st, x, v)
    },
    state,
    zip (names, elems)
  )
}

fun addDefs (state, defs) {
  foldl ( 
    fun (st, def) {
      case def of
        Fun (lable, args, body) -> addFunction(st, lable, args, body)
      | Var (vars) -> addNames(st, vars)
      esac
    },
    state,
    defs
  )
}

fun eval (c@[s, w], expr) {
  case expr of
      Var (lable) -> 
        [c, lookup (s, lable)]
    | Const (n) ->
        [c, n]
    | Binop (op, l, r) ->
        case evalList (c, {l, r}) of
          [c, {l, r}] -> [c, evalOp (op, l, r)]
        esac
    | Assn(x, e) ->
        case evalList(c, {x, e}) of 
          [[s, w], {l, r}] -> 
            case l of 
              ElemRef (data, i) -> [[s, w], data[i] := r]
            | _ -> [[s <- [l, r], w], r]
            esac
        esac
    | Seq (fst_stmt, snd_stmt) ->
        case evalList (c, {fst_stmt, snd_stmt}) of
          [c, {fst_stmt, snd_stmt}] -> [c, snd_stmt]
        esac
    | Skip -> 
        [c, {}]
    | Read (lable) ->
        case readWorld (w) of
          [data, w] -> [[s <- [lable, data], w], {}]
        esac
    | Write (e) ->
        case eval (c, e) of
          [[s, w], data] -> [[s, writeWorld (data, w)], {}]
        esac
    | If (e, is_stmt, else_stmt) ->
        case eval (c, e) of 
          [c, res] -> if res then eval (c, is_stmt) else eval (c, else_stmt) fi
        esac
    | While (stmt, e) ->
        case eval (c, stmt) of 
        [c, res] -> if res then eval (c, Seq (e, While (stmt, expr))) else [c, {}] fi
        esac
    | DoWhile (stmt, e) ->
        eval (c, Seq (stmt, While (e, stmt)))
    | Ref (e) -> 
        [c, e]
    | Ignore (e) ->
        case eval (c, e) of
          [c, _] -> [c, {}]
        esac
    | Scope (defs, e) ->
      case enterScope (s) of
        s -> 
          case addDefs (s, defs) of
            s->
              case eval ([s, w], e) of
                [[s, w], value] -> [[leaveScope (s), w], value]
              esac 
          esac
      esac
    | Call (lable, args) -> 
        case lookup (s, lable) of 
          Fun (names, body) -> 
            case evalList (c, args) of
              [[s, w], vals] -> 
                case body of 
                  External -> 
                    case evalBuiltin (lable, vals, w) of 
                      [res, w] -> [[s, w], res]
                    esac
                | _ -> 
                    case eval([addElems (enterFunction (s), names, vals), w], body) of 
                      [[is, iw], res] -> [[leaveFunction(s, getGlobal(is)), iw], res]
                    esac
                esac
            esac
        esac
    | Set (x, expr) -> 
        eval (c, Assn(Ref (x), expr))
    | String (s) -> 
        [c, s]
    | Array (elems) -> 
        case evalList (c, elems) of
          [c, vals] -> [c, listArray (vals)]
        esac
    | Sexp (name, elems) -> 
        case evalList (c, elems) of 
          [c, vals] -> [c, Sexp (name, listArray (vals))]
        esac
    | Elem (arr, e) -> 
        case evalList (c, {arr, e}) of
          [c, {arr, i}] ->
            case arr of
              Sexp (_, arr) -> [c, arr[i]]
            | _ -> [c, arr[i]]
            esac
        esac
    | ElemRef (arr, e) -> 
        case evalList (c, {arr, e}) of
          [c, {arr, i}] ->
            case arr of
              Sexp(_, arr) -> [c, ElemRef (arr, i)]
            | _ -> [c, ElemRef (arr, i)]
            esac
        esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
