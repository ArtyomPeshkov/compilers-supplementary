-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun helperBinop (fst, op, snd) { 
  Binop (op, fst, snd)
}
-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr (
          {
            [Left, {[s ("!!"), helperBinop],
                    [s ("&&"), helperBinop]}],
            [Nona, {[s ("=="), helperBinop], 
                    [s ("!="), helperBinop], 
                    [s (">"), helperBinop], 
                    [s ("<"), helperBinop], 
                    [s (">="), helperBinop], 
                    [s ("<="), helperBinop]}],
            [Left, {[s ("+"), helperBinop], 
                    [s ("-"), helperBinop]}],
            [Left, {[s ("*"), helperBinop], 
                    [s ("/"), helperBinop], 
                    [s ("%"), helperBinop]}]
          }, primary);

var stmtSimp = memo $ eta syntax (
  kRead x=inbr[s("("), lident, s(")")] { Read (x) } |
  kWrite x=inbr[s("("), exp, s(")")] { Write (x) } |
  kSkip { Skip } |
  x=lident s[":="] y=exp { Assn (x, y) }
);

var stmt = memo $ eta syntax (
  stmtSimp | f=stmtSimp s[";"] l=stmt { Seq (f, l) }
);
-- Public top-level parser
public parse = stmt;
             
